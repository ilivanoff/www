<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-17 at 14:47:01.
 */
class DirManagerTest extends BasePsTest {

    /**
     * Один раз перед инициализацией класса очистим свалку
     */
    public static function setUpBeforeClass() {
        DirManagerTestHelper::cleanScrap();
        self::log('Filters: {}', array_to_string(DirManagerTestHelper::allPossibleFilters()));
        self::log('Scrap: {}', print_r(DirManagerTestHelper::SCRAP_CONTENT(), true));
    }

    protected function setUp() {
        DirManagerTestHelper::removeDir(self::NOT_ALLOWED_STR);
        DirManagerTestHelper::removeDir(DirManagerTestHelper::TMP);
    }

    protected function tearDown() {
        DirManagerTestHelper::removeDir(self::NOT_ALLOWED_STR);
        DirManagerTestHelper::removeDir(DirManagerTestHelper::TMP);
    }

    /**
     * @covers DirManager::inst
     * @covers DirManager::relDirPath
     * @covers DirManager::absDirPath
     */
    public function testInst() {
        $inst = DirManager::inst(DirManagerTestHelper::dirsAbsPath());
        $this->assertEquals(last_char($inst->absDirPath()), DIR_SEPARATOR);
        $this->assertEquals(last_char($inst->relDirPath()), DIR_SEPARATOR);
        $this->assertEquals(first_char($inst->relDirPath()), DIR_SEPARATOR);
        $this->assertEquals($inst->absDirPath(), DirManagerTestHelper::dirsAbsPath());
        $this->assertTrue(strlen($inst->absDirPath()) > strlen($inst->relDirPath()));
        $this->assertTrue(ends_with($inst->absDirPath(), $inst->relDirPath()));

        //Создание в конструкторе
        $inst = DirManager::inst(DirManagerTestHelper::dirsAbsPath());
        $this->assertTrue(!$inst->isDir(DirManagerTestHelper::TMP));
        $this->assertTrue($inst === DirManager::inst(DirManagerTestHelper::dirsAbsPath()));

        $inst = DirManager::inst(DirManagerTestHelper::dirsAbsPath(), DirManagerTestHelper::TMP);
        $this->assertTrue($inst->isDir());
        $this->assertTrue($inst === DirManager::inst(DirManagerTestHelper::dirsAbsPath(), DirManagerTestHelper::TMP));
    }

    /**
     * @covers DirManager::cd
     */
    public function testCd() {
        $inst = DirManager::inst(DirManagerTestHelper::dirsAbsPath());
        $this->assertEquals($inst->absDirPath(), DirManagerTestHelper::dirsAbsPath());
        $inst->cd(DirManagerTestHelper::IMAGES);
        $this->assertEquals($inst->absDirPath(), DirManagerTestHelper::imagesAbsPath());
    }

    /**
     * @covers DirManager::cdToHashFolder
     * @todo   Implement testCdToHashFolder().
     */
    public function testCdToHashFolder() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DirManager::getHashedDirItem
     * @todo   Implement testGetHashedDirItem().
     */
    public function testGetHashedDirItem() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DirManager::httpFilePath
     * @todo   Implement testHttpFilePath().
     */
    public function testHttpFilePath() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DirManager::absFilePath
     */
    public function testAbsFilePath() {
        $inst = DirManager::inst(DirManagerTestHelper::dirsAbsPath());
        $this->assertEquals($inst->absFilePath(null, null), DirManagerTestHelper::dirsAbsPath());
        $this->assertEquals($inst->absFilePath('images/', null), DirManagerTestHelper::imagesAbsPath());
        $this->assertEquals($inst->absFilePath('images', '16x16.png'), DirManagerTestHelper::imagesAbsPath() . '16x16.png');
        $this->assertEquals($inst->absFilePath('images', '16x16', 'png'), DirManagerTestHelper::imagesAbsPath() . '16x16.png');
    }

    /**
     * @covers DirManager::relFilePath
     */
    public function testRelFilePath() {
        $inst = DirManager::inst(DirManagerTestHelper::dirsAbsPath());
        $absImgPath = $inst->absFilePath('images', '16x16', 'png');
        $relImgPath = $inst->relFilePath('images', '16x16', 'png');
        $this->assertTrue(strlen($absImgPath) > strlen($relImgPath));
        $this->assertTrue(ends_with($absImgPath, $relImgPath));
    }

    /**
     * @covers DirManager::isFile
     */
    public function testIsFile() {
        $inst = DirManager::inst(DirManagerTestHelper::dirsAbsPath());
        $this->assertTrue($inst->isFile(null, 'info.txt'));
        $this->assertTrue(!$inst->isFile(null, null));
        $this->assertTrue(!$inst->isFile(null, self::NOT_ALLOWED_STR));
        $this->assertTrue(!$inst->isFile(DirManagerTestHelper::IMAGES, null));
        $this->assertTrue($inst->isFile(DirManagerTestHelper::IMAGES, '16x16.png'));
        $this->assertTrue($inst->isFile(DirManagerTestHelper::IMAGES, '16x16', 'png'));

        $inst->cd(DirManagerTestHelper::IMAGES);
        $this->assertTrue(!$inst->isFile(null, 'info.txt'));
        $this->assertTrue($inst->isFile(null, '16x16.png'));
        $this->assertTrue($inst->isFile(null, '16x16', 'png'));
    }

    /**
     * @covers DirManager::isDir
     */
    public function testIsDir() {
        $inst = DirManager::inst(DirManagerTestHelper::dirsAbsPath());
        $this->assertTrue($inst->isDir());
        $this->assertTrue($inst->isDir(DirManagerTestHelper::DIR));
        $this->assertTrue($inst->isDir(DirManagerTestHelper::IMAGES));
        $this->assertTrue(!$inst->isDir(self::NOT_ALLOWED_STR));
    }

    /**
     * @covers DirManager::isImage
     */
    public function testIsImage() {
        $inst = DirManager::inst(DirManagerTestHelper::dirsAbsPath());
        $this->assertTrue(!$inst->isImage(null, 'info.txt'));
        $this->assertTrue(!$inst->isImage(DirManagerTestHelper::IMAGES, null));
        $this->assertTrue($inst->isImage(DirManagerTestHelper::IMAGES, '16x16.png'));
        $this->assertTrue($inst->isImage(DirManagerTestHelper::IMAGES, '16x16', 'png'));

        $inst->cd(DirManagerTestHelper::IMAGES);
        $this->assertTrue(!$inst->isImage(null, 'info.txt'));
        $this->assertTrue($inst->isImage(null, '16x16.png'));
        $this->assertTrue($inst->isImage(null, '16x16', 'png'));
    }

    /**
     * @covers DirManager::getDirItem
     */
    public function testGetDirItem() {
        $di = DirManager::inst(DirManagerTestHelper::dirsAbsPath())->getDirItem(DirManagerTestHelper::IMAGES);
        $this->assertTrue($di instanceof DirItem);
        $this->assertTrue($di->isDir());

        //Объект должен создаться, хотя файла и нет
        $di = DirManager::inst(DirManagerTestHelper::dirsAbsPath())->getDirItem(DirManagerTestHelper::IMAGES, self::NOT_ALLOWED_STR);
        $this->assertEquals($di->getAbsPath(), DirManagerTestHelper::imagesAbsPath() . self::NOT_ALLOWED_STR);

        //Проверим на однм и том-же объекте, должны получить один и тот же экземпляр
        $di1 = DirManager::inst(DirManagerTestHelper::dirsAbsPath())->getDirItem(DirManagerTestHelper::IMAGES, '16x16.png');
        $this->assertTrue($di1->isImg());

        $di2 = DirManager::inst(DirManagerTestHelper::dirsAbsPath())->getDirItem(DirManagerTestHelper::IMAGES, '16x16', 'png');
        $this->assertTrue($di2->isImg());
        $this->assertTrue($di1 === $di2);

        $di2 = DirItem::inst(array(DirManagerTestHelper::dirsAbsPath(), DirManagerTestHelper::IMAGES), '16x16', 'png');
        $this->assertTrue($di1 === $di2);

        $di1 = DirManager::inst(DirManagerTestHelper::dirsAbsPath())->getDirItem();
        $di2 = DirItem::inst(array(DirManagerTestHelper::dirsAbsPath()));
        $this->assertTrue($di1 === $di2);
    }

    /**
     * @covers DirManager::makePath
     */
    public function testMakePath() {
        $dm = DirManager::inst(DirManagerTestHelper::dirsAbsPath(), DirManagerTestHelper::TMP);
        $this->assertTrue($dm->isDir());
        $dm->getDirItem()->remove();
        $this->assertFalse($dm->isDir());
        $dm = DirManager::inst(array(DirManagerTestHelper::dirsAbsPath(), DirManagerTestHelper::TMP));
        $this->assertFalse($dm->isDir());
        $dm->makePath();
        $this->assertTrue($dm->isDir());
        $this->assertEquals($dm->absDirPath(), DirManagerTestHelper::tmpAbsPath());

        $dm = DirManager::inst(DirManagerTestHelper::dirsAbsPath());
        $path = array(DirManagerTestHelper::TMP, DirManagerTestHelper::TMP);
        $this->assertFalse($dm->isDir($path));
        $dm->makePath($path);
        $this->assertTrue($dm->isDir($path));
        $dm->getDirItem($path)->remove();
        $this->assertFalse($dm->isDir($path));
        $this->assertTrue($dm->isDir(DirManagerTestHelper::TMP));
        $dm->getDirItem(DirManagerTestHelper::TMP)->remove();
        $this->assertFalse($dm->isDir(DirManagerTestHelper::TMP));
        $this->assertTrue($dm->isDir());
    }

    /**
     * @covers DirManager::touch
     */
    public function testTouch() {
        $dm = DirManager::inst(DirManagerTestHelper::dirsAbsPath(), DirManagerTestHelper::TMP);
        $this->assertTrue($dm->isDir());

        //СОздадим файл в директории TMP
        $dm->touch(null, DirManagerTestHelper::TMP, 'txt');
        $this->assertTrue($dm->isFile(null, DirManagerTestHelper::TMP, 'txt'));
        $dm->getDirItem(null, DirManagerTestHelper::TMP, 'txt')->remove();
        $this->assertFalse($dm->isFile(null, DirManagerTestHelper::TMP, 'txt'));
        //Фейковый touch
        $dm->getDirItem(null, DirManagerTestHelper::TMP, 'txt')->touch(false);
        $this->assertFalse($dm->isFile(null, DirManagerTestHelper::TMP, 'txt'));
    }

    /**
     * @covers DirManager::clearDir
     */
    public function testClearDir() {
        $dm = DirManager::inst(DirManagerTestHelper::dirsAbsPath());
        $path = array(DirManagerTestHelper::TMP, DirManagerTestHelper::TMP);
        $this->assertFalse($dm->isDir($path));
        //Создаём tmp/tmp
        $dm->makePath($path);
        $this->assertTrue($dm->isDir($path));
        $this->assertTrue($dm->isDir(DirManagerTestHelper::TMP));

        //Оставляем tmp/
        $dm->clearDir(DirManagerTestHelper::TMP, false);
        $this->assertTrue($dm->isDir());
        $this->assertTrue($dm->isDir(DirManagerTestHelper::TMP));
        $this->assertFalse($dm->isDir($path));

        //Опять создаём tmp/tmp.txt
        $dm->makePath($path);
        $this->assertTrue($dm->isDir());
        $this->assertTrue($dm->isDir(DirManagerTestHelper::TMP));
        $this->assertTrue($dm->isDir($path));

        //Удаляем всё подпапки /
        $dm->clearDir(DirManagerTestHelper::TMP, true);
        $this->assertTrue($dm->isDir());
        $this->assertFalse($dm->isDir(DirManagerTestHelper::TMP));
        $this->assertFalse($dm->isDir($path));

        //Cоздаём tmp/tmp/tmp.txt
        $dm->makePath($path);
        $this->assertTrue($dm->isDir());
        $this->assertTrue($dm->isDir(DirManagerTestHelper::TMP));
        $this->assertTrue($dm->isDir($path));
        $dm->touch($path, DirManagerTestHelper::TMP, 'txt');
        $this->assertTrue($dm->isFile($path, DirManagerTestHelper::TMP, 'txt'));
        //BOOM:)
        $dm->clearDir(DirManagerTestHelper::TMP, true);
        $this->assertTrue($dm->isDir());
        $this->assertFalse($dm->isDir(DirManagerTestHelper::TMP));
        $this->assertFalse($dm->isDir($path));
        $this->assertFalse($dm->isFile($path, DirManagerTestHelper::TMP, 'txt'));
    }

    /**
     * @covers DirManager::getSubDirNames
     */
    public function testGetSubDirNames() {
        $dm = DirManager::inst(DirManagerTestHelper::scrapAbsPath());

        //Проверим директорию scrap
        $namesActual = $dm->getSubDirNames();
        sort($namesActual);

        $namesExpected = array('dir1', 'dir2');
        sort($namesExpected);

        $this->assertEquals($namesExpected, $namesActual);

        //Проверим поддиректорию dir1
        $namesActual = $dm->getSubDirNames('dir1');
        sort($namesActual);

        $this->assertEquals($namesExpected, $namesActual);

        //Проверим с разрешением
        $this->assertEquals(array('dir1'), $dm->getSubDirNames(null, 'dir1'));
        $this->assertEquals(array('dir2'), $dm->getSubDirNames(null, null, 'dir1'));
        $this->assertEquals(array(), $dm->getSubDirNames(null, null, array('dir1', 'dir2')));
    }

    /**
     * @covers DirManager::getDirContent
     */
    public function testGetDirContentImages() {
        $dm = DirManager::inst(DirManagerTestHelper::dirsAbsPath());

        //Сначала поработаем с директорией images
        $images = $dm->getDirContent(DirManagerTestHelper::IMAGES, DirItemFilter::IMAGES);
        $this->assertTrue(count($images) === count(DirManagerTestHelper::imageNames()));
        foreach ($images as $name => $di) {
            $this->assertTrue(in_array($name, DirManagerTestHelper::imageNames()));
            $this->assertTrue($di instanceof DirItem);
            $this->assertTrue($di->isImg());
        }

        $images = $dm->getDirContent(DirManagerTestHelper::IMAGES, DirItemFilter::IMAGES, DirManager::DC_NAMES);
        sort($images);
        $this->assertEquals($images, DirManagerTestHelper::imageNames());

        $images = $dm->getDirContent(DirManagerTestHelper::IMAGES, DirItemFilter::IMAGES, DirManager::DC_NAMES_NO_EXT);
        sort($images);
        $this->assertEquals($images, DirManagerTestHelper::imageNames(false));
    }

    /**
     * @covers DirManager::getDirContent
     * @covers DirManager::getDirContentCnt
     */
    public function testGetDirContentScrap() {
        $dm = DirManager::inst(DirManagerTestHelper::dirsAbsPath());
        $dm->cd(DirManagerTestHelper::SCRAP);

        foreach (DirManagerTestHelper::allPossibleFilters() as $filterType) {
            //Все элементы кучи, отфильтрованные по текстовому фильтру (фильтр/расширение)
            $itemsMap = $dm->getDirContent(null, $filterType, DirManager::DC_MAP);
            //Все элементы кучи, отфильтрованные при помощи функции обратного вызова
            $itemsMapFilterCallback = $dm->getDirContent(null, function(DirItem $di) use ($filterType) {
                        return DirItemFilter::filter($filterType, $di);
                    }, DirManager::DC_MAP);

            $this->assertEquals($itemsMap, $itemsMapFilterCallback);

            $itemsMapNames = array_keys($itemsMap);
            sort($itemsMapNames);

            //Названия элементов кучи, отфильтрованные по текстовому фильтру (фильтр/расширение)
            $itemsNames = $dm->getDirContent(null, $filterType, DirManager::DC_NAMES);
            //Названия элементов кучи, отфильтрованные при помощи функции обратного вызова
            $itemsNamesFilterCallback = $dm->getDirContent(null, function(DirItem $di) use ($filterType) {
                        return DirItemFilter::filter($filterType, $di);
                    }, DirManager::DC_NAMES);

            $this->assertEquals($itemsNames, $itemsNamesFilterCallback);

            sort($itemsNames);

            //Названия элементов кучи без расширений, отфильтрованные по текстовому фильтру (фильтр/расширение)
            $itemsNamesNoExt = $dm->getDirContent(null, $filterType, DirManager::DC_NAMES_NO_EXT);
            //Названия элементов кучи без расширений, отфильтрованные при помощи функции обратного вызова
            $itemsNamesNoExtFilterCallback = $dm->getDirContent(null, function(DirItem $di) use ($filterType) {
                        return DirItemFilter::filter($filterType, $di);
                    }, DirManager::DC_NAMES_NO_EXT);

            $this->assertEquals($itemsNamesNoExt, $itemsNamesNoExtFilterCallback);

            sort($itemsNamesNoExt);

            //Проверим, что для фильтра есть проверка
            $this->assertTrue(count($itemsMap) > 0, 'No items filtered for: ' . $filterType);

            //Проверим getDirContentCnt
            $this->assertTrue(count($itemsMap) === $dm->getDirContentCnt(null, $filterType));

            //Проверим, что одинаковы данные в виде мепа и только названий
            $this->assertEquals($itemsMapNames, $itemsNames);

            //Проверим, что им равны данные, извлекаемые без расширений
            $this->assertTrue(count($itemsMapNames) === count($itemsNamesNoExt));
            foreach ($itemsNames as $name) {
                $this->assertTrue(in_array(get_file_name($name), $itemsNamesNoExt));
            }

            self::log('{}: {}', $filterType, array_to_string($itemsNames));

            //Пробежимся по мапу и проверим, что все элементы действительно фильтруются
            foreach ($itemsMap as $name => $item) {
                $this->assertTrue(DirItemFilter::filter($filterType, $item));
                $this->assertTrue(DirItemFilter::filter(function(DirItem $di) use ($filterType) {
                                    return DirItemFilter::filter($filterType, $di);
                                }, $item));
            }

            //Берём те элементы, которые подходят под фильтр
            $this->assertEquals(DirManagerTestHelper::SCRAP_FILTER($filterType), $itemsNames, $filterType);
        }
    }

    /**
     * Имплементация тестирования получения содержимого поддиректорий
     */
    private function doTestGetDirContentFull($deepLevel, $filterType, $exceptDirs = array(), $forceEnableDirs = array()) {
        $dm = DirManager::inst(DirManagerTestHelper::dirsAbsPath());
        $dm->cd(DirManagerTestHelper::SCRAP);

        //Найденные элементы кучи, отфильтрованные по текстовому фильтру (фильтр/расширение)
        $itemsFound = $dm->getDirContentFull(null, $filterType, $exceptDirs, $forceEnableDirs);
        //Найденные элементы кучи, отфильтрованные при помощи функции обратного вызова
        $itemsFoundCallback = $dm->getDirContentFull(null, function(DirItem $di) use ($filterType) {
                    return DirItemFilter::filter($filterType, $di);
                }, $exceptDirs, $forceEnableDirs);

        $this->assertEquals($itemsFound, $itemsFoundCallback);

        $itemsFiltered = DirManagerTestHelper::SCRAP_FILTER($filterType);

        //Проверим, что для фильтра есть проверка
        $this->assertTrue(count($itemsFound) > 0, 'No items filtered for: ' . $filterType);

        //Проверим, что было извлечено кол-во элементов по кол-ву вложения кучи
        $this->assertTrue(count($itemsFound) == count($itemsFiltered) * $deepLevel, "filterType=$filterType, deepLevel=$deepLevel");

        //Пробежимся по мапу и проверим, что все элементы действительно фильтруются
        //Параллельно разобъём элементы в группы по названиям
        $GROUPS = array();
        /* @var $item DirItem */
        foreach ($itemsFound as $item) {
            $this->assertTrue(DirItemFilter::filter($filterType, $item));
            $this->assertTrue(DirItemFilter::filter(function(DirItem $di) use ($filterType) {
                                return DirItemFilter::filter($filterType, $di);
                            }, $item));
            //Будем сразу складывать в ассоциативный массив, чтобы потом не думать о проверке уникальности
            $GROUPS[$item->getName()][$item->getDirname()] = 1;
        }

        //Проверим вложенность подпапок. Достаточно проверить, что они не пересекаются
        foreach ($GROUPS as $pathes) {
            $this->assertTrue(count($pathes) == $deepLevel);
        }
    }

    /**
     * @covers DirManager::getDirContentFull
     */
    public function testGetDirContentFull() {
        foreach (DirManagerTestHelper::allPossibleFilters() as $filterType) {
            //>>> БЕЗ ФИЛЬТРАЦИИ
            $this->doTestGetDirContentFull(3, $filterType);

            //>>> ЗАПРЕТИМ ПОДДИРЕКТОРИЮ
            $this->doTestGetDirContentFull(1, $filterType, array('dir1'));

            //>>> ЗАПРЕТИМ ПОДДИРЕКТОРИЮ
            $this->doTestGetDirContentFull(2, $filterType, array('dir1/dir1'));

            //>>> ЗАПРЕТИМ ПОДДИРЕКТОРИЮ + РАЗРЕШИМ ВЛОЖЕННУЮ
            $this->doTestGetDirContentFull(2, $filterType, array('dir1'), array('dir1/dir1'));

            //>>> ЗАПРЕТИМ НЕСУЩЕСТВУЮЩУЮ ПОДДИРЕКТОРИЮ + РАЗРЕШИМ ВЛОЖЕННУЮ
            $this->doTestGetDirContentFull(3, $filterType, array('dir3'), array('dir1/dir1'));
        }
    }

    /**
     * @covers DirManager::copyDirContent2Dir
     * @todo   Implement testCopyDirContent2Dir().
     */
    public function testCopyDirContent2Dir() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
