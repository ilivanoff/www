<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-17 at 18:49:46.
 */
class PsSequenceFileTest extends BasePsTest {

    /**
     * @covers PsSequenceFile::next
     * @covers PsSequenceFile::current
     * @covers PsSequenceFile::hasCurrent
     * @todo   Implement testNext().
     */
    public function testNext() {
        $sequence = PsSequenceFile::inst(TestSequence::fileDi()->remove(), 1, 10, 2);
        $this->assertFalse($sequence->hasCurrent());
        $this->assertNull($sequence->current());

        $this->assertEquals($sequence->next(), 1);
        $this->assertEquals($sequence->current(), 1);

        $this->assertEquals($sequence->next(), 3);
        $this->assertEquals($sequence->current(), 3);

        $this->assertEquals($sequence->next(), 5);
        $this->assertEquals($sequence->current(), 5);

        $this->assertEquals($sequence->next(), 7);
        $this->assertEquals($sequence->current(), 7);

        $this->assertEquals($sequence->next(), 9);
        $this->assertEquals($sequence->current(), 9);

        $this->assertEquals($sequence->next(), 1);
        $this->assertEquals($sequence->current(), 1);

        $this->assertEquals($sequence->next(), 3);
        $this->assertEquals($sequence->current(), 3);

        TestSequence::fileDi()->remove();

        $this->assertFalse($sequence->hasCurrent());
        $this->assertNull($sequence->current());

        $this->assertEquals($sequence->next(), 1);
        $this->assertEquals($sequence->current(), 1);

        $this->assertEquals($sequence->next(), 3);
        $this->assertEquals($sequence->current(), 3);

        TestSequence::fileDi()->putToFile('12');

        $this->assertTrue($sequence->hasCurrent());
        $this->assertEquals($sequence->current(), 12);

        $this->assertEquals($sequence->next(), 1);
        $this->assertEquals($sequence->current(), 1);

        TestSequence::fileDi()->putToFile('ABC');

        $this->assertFalse($sequence->hasCurrent());
        $this->assertNull($sequence->current());

        $this->assertEquals($sequence->next(), 1);
        $this->assertEquals($sequence->current(), 1);
    }

    /**
     * @covers PsSequenceFile::inst
     */
    public function testInst() {
        try {
            PsSequenceFile::inst(TestSequence::fileDiBreak(), 1, -1, 1);
            $this->brakeNoException();
        } catch (PException $ex) {
            
        }
        try {
            PsSequenceFile::inst(TestSequence::fileDiBreak(), 1, 1, 1);
            $this->brakeNoException();
        } catch (PException $ex) {
            
        }
        try {
            PsSequenceFile::inst(TestSequence::fileDiBreak(), 1, 2, -1);
            $this->brakeNoException();
        } catch (PException $ex) {
            
        }
    }

}
