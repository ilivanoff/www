<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-09-16 at 15:06:29.
 */
class PsImgTest extends BasePsTest {

    /**
     * @covers PsImg::TYPES
     */
    public function testTYPES() {
        $this->assertTrue(is_array(PsImg::TYPES()));
        $this->assertNotEmpty(PsImg::TYPES());
    }

    /**
     * @covers PsImg::hasType
     */
    public function testHasType() {
        $this->assertTrue(PsImg::hasType(IMAGETYPE_PNG));
        $this->assertTrue(PsImg::hasType(IMAGETYPE_GIF));
        $this->assertTrue(PsImg::hasType(IMAGETYPE_JPEG));
        $this->assertFalse(PsImg::hasType(self::NOT_ALLOWED_INT));
        $this->assertFalse(PsImg::hasType(self::NOT_ALLOWED_STR));
        $this->assertFalse(PsImg::hasType(null));
    }

    /**
     * @covers PsImg::EXTS
     */
    public function testEXTS() {
        $this->assertTrue(is_array(PsImg::EXTS()));
        $this->assertNotEmpty(PsImg::EXTS());
    }

    /**
     * @covers PsImg::hasExt
     */
    public function testHasExt() {
        $this->assertTrue(PsImg::hasExt('png'));
        $this->assertTrue(PsImg::hasExt('PNG'));
        $this->assertTrue(PsImg::hasExt('gif'));
        $this->assertTrue(PsImg::hasExt('jpg'));
        $this->assertTrue(PsImg::hasExt('jpeg'));
        $this->assertFalse(PsImg::hasExt(IMAGETYPE_PNG));
        $this->assertFalse(PsImg::hasExt(self::NOT_ALLOWED_STR));
        $this->assertFalse(PsImg::hasExt(self::NOT_ALLOWED_INT));
        $this->assertFalse(PsImg::hasExt(null));
    }

    /**
     * @covers PsImg::MIMES
     */
    public function testMIMES() {
        $this->assertTrue(is_array(PsImg::MIMES()));
        $this->assertNotEmpty(PsImg::MIMES());
    }

    /**
     * @covers PsImg::hasMime
     */
    public function testHasMime() {
        $this->assertTrue(PsImg::hasMime('image/png'));
        $this->assertTrue(PsImg::hasMime('image/PNG'));
        $this->assertTrue(PsImg::hasMime('image/gif'));
        $this->assertTrue(PsImg::hasMime('IMAGE/gif'));
        $this->assertTrue(PsImg::hasMime('image/jpeg'));

        $this->assertFalse(PsImg::hasMime(null));
        $this->assertFalse(PsImg::hasMime('image/jpg'));
        $this->assertFalse(PsImg::hasMime('image//jpg'));
        $this->assertFalse(PsImg::hasMime(self::NOT_ALLOWED_STR));
    }

    /**
     * @covers PsImg::getType
     */
    public function testGetType() {
        $this->assertEquals(IMAGETYPE_PNG, PsImg::getType('png'));
        $this->assertEquals(IMAGETYPE_PNG, PsImg::getType('image/png'));
        $this->assertEquals(IMAGETYPE_PNG, PsImg::getType(IMAGETYPE_PNG));

        $this->assertEquals(IMAGETYPE_GIF, PsImg::getType('gif'));
        $this->assertEquals(IMAGETYPE_GIF, PsImg::getType('image/gif'));
        $this->assertEquals(IMAGETYPE_GIF, PsImg::getType(IMAGETYPE_GIF));

        $this->assertEquals(IMAGETYPE_JPEG, PsImg::getType('jpg'));
        $this->assertEquals(IMAGETYPE_JPEG, PsImg::getType('jpeg'));
        $this->assertEquals(IMAGETYPE_JPEG, PsImg::getType('image/jpeg'));
        $this->assertEquals(IMAGETYPE_JPEG, PsImg::getType(IMAGETYPE_JPEG));

        try {
            PsImg::getType(self::NOT_ALLOWED_INT);
            $this->brakeNoException();
        } catch (PException $ex) {
            
        }

        try {
            PsImg::getType(null);
            $this->brakeNoException();
        } catch (PException $ex) {
            
        }
    }

    /**
     * @covers PsImg::getExt
     */
    public function testGetExt() {
        $this->assertEquals('png', PsImg::getExt('png'));
        $this->assertEquals('png', PsImg::getExt('image/png'));
        $this->assertEquals('png', PsImg::getExt(IMAGETYPE_PNG));

        $this->assertEquals('gif', PsImg::getExt('gif'));
        $this->assertEquals('gif', PsImg::getExt('image/gif'));
        $this->assertEquals('gif', PsImg::getExt(IMAGETYPE_GIF));

        $this->assertEquals('jpg', PsImg::getExt('jpg'));
        $this->assertEquals('jpeg', PsImg::getExt('jpeg'));
        $this->assertEquals('jpeg', PsImg::getExt('image/jpeg'));
        $this->assertEquals('jpeg', PsImg::getExt(IMAGETYPE_JPEG));


        try {
            PsImg::getExt(self::NOT_ALLOWED_INT);
            $this->brakeNoException();
        } catch (PException $ex) {
            
        }

        try {
            PsImg::getExt(null);
            $this->brakeNoException();
        } catch (PException $ex) {
            
        }
    }

    /**
     * @covers PsImg::getMime
     */
    public function testGetMime() {
        $this->assertEquals('image/png', PsImg::getMime('pNg'));

        $this->assertEquals('image/gif', PsImg::getMime('image/gif'));

        $this->assertEquals('image/jpeg', PsImg::getMime('jpg'));
        $this->assertEquals('image/jpeg', PsImg::getMime('JPEG'));
        $this->assertEquals('image/jpeg', PsImg::getMime(IMAGETYPE_JPEG));

        try {
            PsImg::getMime(self::NOT_ALLOWED_STR);
            $this->brakeNoException();
        } catch (PException $ex) {
            
        }

        try {
            PsImg::getMime(null);
            $this->brakeNoException();
        } catch (PException $ex) {
            
        }
    }

    /**
     * @covers PsImg::isImg
     */
    public function testIsImg() {
        $this->assertTrue(PsImg::isImg(TestResources::imageGif()));
        $this->assertTrue(PsImg::isImg(TestResources::imagePng()));
        $this->assertTrue(PsImg::isImg(TestResources::imageJpg()));
        $this->assertFalse(PsImg::isImg(TestResources::fakeimagePng()));
        $this->assertFalse(PsImg::isImg(null));
    }

    /**
     * @covers PsImg::assertIsImg
     */
    public function testAssertIsImg() {
        PsImg::assertIsImg(TestResources::imageGif());
        PsImg::assertIsImg(TestResources::imagePng());
        PsImg::assertIsImg(TestResources::imageJpg());
        try {
            PsImg::assertIsImg(TestResources::fakeimagePng());
            $this->brakeNoException();
        } catch (PException $ex) {
            
        }
    }

}
