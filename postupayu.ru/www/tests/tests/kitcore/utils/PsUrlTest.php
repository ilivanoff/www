<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-20 at 15:47:13.
 */
class PsUrlTest extends BasePsTest {

    /**
     * @covers PsUrl::isHttp
     */
    public function testIsHttp() {
        $this->assertTrue(PsUrl::isHttp('http://xxx.php'));
        $this->assertTrue(PsUrl::isHttp('https://xxx.php'));
        $this->assertTrue(PsUrl::isHttp('http://'));
        $this->assertTrue(PsUrl::isHttp('https://'));
        $this->assertFalse(PsUrl::isHttp(null));
        $this->assertFalse(PsUrl::isHttp('httpx://xxx.php'));
        $this->assertFalse(PsUrl::isHttp('http:xxx.php'));
        $this->assertFalse(PsUrl::isHttp('https:xxx.php'));
    }

    /**
     * @covers PsUrl::toHttp
     */
    public function testToHttp() {
        $this->assertEquals(PsUrl::toHttp(), 'http://127.0.0.1');
        $this->assertEquals(PsUrl::toHttp('/a.php'), 'http://127.0.0.1/a.php');
        $this->assertEquals(PsUrl::toHttp('/a.php?a=b'), 'http://127.0.0.1/a.php?a=b');

        //Меняем HTTP_HOST
        $host = 'postupayu.ru';
        ServerArrayAdapter::inst()->set('HTTP_HOST', $host, true);
        $this->assertEquals(PsUrl::toHttp(), "http://$host");
        $this->assertEquals(PsUrl::toHttp('/a.php'), "http://$host/a.php");
        $this->assertEquals(PsUrl::toHttp('/a.php?a=b'), "http://$host/a.php?a=b");

        //Меняем SERVER_PORT
        $port = 100;
        ServerArrayAdapter::inst()->set('SERVER_PORT', $port, true);
        $this->assertEquals(PsUrl::toHttp(), "http://$host:$port");
        $this->assertEquals(PsUrl::toHttp('/a.php'), "http://$host:$port/a.php");
        $this->assertEquals(PsUrl::toHttp('/a.php?a=b'), "http://$host:$port/a.php?a=b");

        //Меняем HTTPS
        ServerArrayAdapter::inst()->set('HTTPS', 'on', true);
        $this->assertEquals(PsUrl::toHttp(), "https://$host:$port");
        $this->assertEquals(PsUrl::toHttp('/a.php'), "https://$host:$port/a.php");
        $this->assertEquals(PsUrl::toHttp('/a.php?a=b'), "https://$host:$port/a.php?a=b");

        //Отменяем и проверим, что всё вернулось
        ServerArrayAdapter::inst()->restoreStory();
        $this->assertEquals(PsUrl::toHttp(), 'http://127.0.0.1');
    }

    /**
     * @covers PsUrl::current
     */
    public function testCurrent() {
        $this->assertEquals(PsUrl::current(), 'http://127.0.0.1');

        //Меняем HTTP_HOST
        $host = 'postupayu.ru';
        ServerArrayAdapter::inst()->set('HTTP_HOST', $host, true);
        $this->assertEquals(PsUrl::current(), "http://$host");

        //Меняем SERVER_PORT
        $port = 100;
        ServerArrayAdapter::inst()->set('SERVER_PORT', $port, true);
        $this->assertEquals(PsUrl::current(), "http://$host:$port");

        //Меняем HTTPS
        ServerArrayAdapter::inst()->set('HTTPS', 'on', true);
        $this->assertEquals(PsUrl::current(), "https://$host:$port");

        //Отменяем и проверим, что всё вернулось
        ServerArrayAdapter::inst()->restoreStory();
        $this->assertEquals(PsUrl::current(), 'http://127.0.0.1');
    }

    /**
     * @covers PsUrl::getParamsToString
     */
    public function testGetParamsToString() {
        $this->assertEquals(PsUrl::getParamsToString(null), '');
        $this->assertEquals(PsUrl::getParamsToString(array('a' => 1)), 'a=1');
        $this->assertEquals(PsUrl::getParamsToString(array('a' => 1, 'b' => 2)), 'a=1&b=2');
        $this->assertEquals(PsUrl::getParamsToString('a=1'), 'a=1');
        $this->assertEquals(PsUrl::getParamsToString('a=1&b=2'), 'a=1&b=2');
        $this->assertEquals(PsUrl::getParamsToString('xxx'), 'xxx');
    }

    /**
     * @covers PsUrl::addParams
     */
    public function testAddParams() {
        $this->assertEquals(PsUrl::addParams('a.php', 'a=1&b=2'), 'a.php?a=1&b=2');
        $this->assertEquals(PsUrl::addParams('a.php?', 'a=1&b=2'), 'a.php?a=1&b=2');
        $this->assertEquals(PsUrl::addParams('a.php?', array('a' => 1, 'b' => 2)), 'a.php?a=1&b=2');
        $this->assertEquals(PsUrl::addParams(null, array('a' => 1, 'b' => 2)), 'a=1&b=2');
        $this->assertEquals(PsUrl::addParams('a.php', null), 'a.php');
        $this->assertEquals(PsUrl::addParams(null, null), '');
        $this->assertEquals(PsUrl::addParams('a.php', 'a=b', 'c'), 'a.php?a=b#c');
        $this->assertEquals(PsUrl::addParams(null, null, 'c'), '#c');
    }

}
