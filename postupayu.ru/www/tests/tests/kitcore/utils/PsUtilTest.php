<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-09-15 at 15:24:06.
 */
class PsUtilTest extends BasePsTest {

    /**
     * @covers PsUtil::fileUniqueTime
     */
    function testFileUniqueTime() {
        $files = array();
        for ($i = 0; $i < 1000; $i++) {
            $files[] = PsUtil::fileUniqueTime();
        }
        self::log('Generated file names: {}', print_r($files, true));
        $count = count($files);
        $CountUq = count(array_unique($files));
        $this->assertEquals($count, $CountUq, "Files: $count, Unique: $CountUq");
    }

    /**
     * @covers PsUtil::getClassName
     */
    public function testGetClassName() {
        $this->assertEquals(__CLASS__, PsUtil::getClassName(new PsUtilTest()));
        $this->assertEquals(__CLASS__, PsUtil::getClassName(__CLASS__));
        $this->assertEquals(__CLASS__, PsUtil::getClassName(__FILE__));
        $this->assertNotEquals(__FILE__, PsUtil::getClassName(__FILE__));
    }

    /**
     * @covers PsUtil::getClassFirstCall
     * @todo   Implement testGetClassFirstCall().
     */
    public function testGetClassFirstCall() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers PsUtil::getClassConsts
     */
    public function testGetClassConsts() {
        $fromCache = true;
        $this->assertEquals(ClassA::CONSTS(), PsUtil::getClassConsts(new ClassA(), null, $fromCache));
        $this->assertFalse($fromCache);
        $this->assertEquals(ClassA::CONSTS(), PsUtil::getClassConsts(ClassA::get__CLASS__(), null, $fromCache));
        $this->assertTrue($fromCache);
        $this->assertEquals(ClassA::CONSTS(), PsUtil::getClassConsts(ClassA::get__FILE__(), null, $fromCache));
        $this->assertTrue($fromCache);
        $this->assertEquals(array('CONST_A' => 'A'), PsUtil::getClassConsts(ClassA::get__CLASS__(), 'CONST_A', $fromCache));
        $this->assertFalse($fromCache);
        $this->assertEquals(ClassA::CONSTS(), PsUtil::getClassConsts(ClassA::get__CLASS__(), 'CONST_', $fromCache));
        $this->assertFalse($fromCache);
        $this->assertEquals(array(), PsUtil::getClassConsts(ClassA::get__CLASS__(), 'CONSTX_', $fromCache));
        $this->assertFalse($fromCache);
        $this->assertEquals(array(), PsUtil::getClassConsts(ClassA::get__CLASS__(), 'CONSTX_', $fromCache));
        $this->assertTrue($fromCache);
    }

    /**
     * @covers PsUtil::getClassConstsByValue
     */
    public function testGetClassConstsByValue() {
        $this->assertEquals(array('CONST_A'), PsUtil::getClassConstsByValue(new ClassA(), null, 'A'));
        $this->assertEquals(array('CONST_C', 'CONST_C2'), PsUtil::getClassConstsByValue(new ClassA(), null, 'C'));
        $this->assertEquals(array('CONST_C', 'CONST_C2'), PsUtil::getClassConstsByValue(new ClassA(), 'CONST_', 'C'));
        $this->assertEquals(array('CONST_A'), PsUtil::getClassConstsByValue(new ClassA(), 'CONST_A', 'A'));
        $this->assertEquals(array(), PsUtil::getClassConstsByValue(new ClassA(), null, 'X'));
        $this->assertEquals(array(), PsUtil::getClassConstsByValue(new ClassA(), 'CONSTX_', 'A'));
    }

    /**
     * @covers PsUtil::getClassConstByValue
     */
    public function testGetClassConstByValue() {
        $this->assertEquals('CONST_A', PsUtil::getClassConstByValue(new ClassA(), null, 'A'));
        $this->assertEquals('CONST_A', PsUtil::getClassConstByValue(new ClassA(), 'CONST_', 'A'));
        $this->assertEquals('CONST_A', PsUtil::getClassConstByValue(new ClassA(), 'CONST_A', 'A'));
        $this->assertEquals('CONST_B', PsUtil::getClassConstByValue(new ClassA(), null, 'B'));
        $this->assertEquals('CONST_B', PsUtil::getClassConstByValue(new ClassA(), 'CONST_', 'B'));
        $this->assertEquals('CONST_B', PsUtil::getClassConstByValue(new ClassA(), 'CONST_B', 'B'));
        try {
            //Константы не существует
            PsUtil::getClassConstByValue(new ClassA(), 'CONST_A', 'B');
            $this->fail('Exception is expected');
        } catch (PException $ex) {
            //OK
        }
        try {
            //Две константы с одинаковым значением
            PsUtil::getClassConstByValue(new ClassA(), 'CONST_', 'C');
            $this->fail('Exception is expected');
        } catch (PException $ex) {
            //OK
        }
    }

    /**
     * @covers PsUtil::assertClassHasConstVithValue
     */
    public function testAssertClassHasConstVithValue() {
        $this->assertEquals('A', PsUtil::assertClassHasConstVithValue(new ClassA(), null, 'A'));
        $this->assertEquals('B', PsUtil::assertClassHasConstVithValue(ClassA::get__CLASS__(), 'CONST_', 'B'));
        $this->assertEquals('B', PsUtil::assertClassHasConstVithValue(ClassA::get__FILE__(), 'CONST_B', 'B'));
        try {
            //Константы не существует
            PsUtil::assertClassHasConstVithValue(new ClassA(), 'CONST_A', 'B');
            $this->fail('Exception is expected');
        } catch (PException $ex) {
            //OK
        }
        try {
            //Две константы с одинаковым значением
            PsUtil::assertClassHasConstVithValue(new ClassA(), 'CONST_', 'C');
            $this->fail('Exception is expected');
        } catch (PException $ex) {
            //OK
        }
    }

    /**
     * @covers PsUtil::defineClassConsts
     * @todo   Implement testDefineClassConsts().
     */
    public function testDefineClassConsts() {
        $this->assertFalse(defined('XX_CONST_A'));
        PsUtil::defineClassConsts(ClassA::get__CLASS__(), 'XX', 'CONST_A');
        $this->assertTrue(defined('XX_CONST_A'));

        $this->assertFalse(defined('ClassA_CONST_A'));
        PsUtil::defineClassConsts(ClassA::get__CLASS__(), null, 'CONST_A');
        $this->assertTrue(defined('ClassA_CONST_A'));

        $this->assertFalse(defined('ClassA_CONST_B'));
        PsUtil::defineClassConsts(new ClassA(), null, 'CONST_B');
        $this->assertTrue(defined('ClassA_CONST_B'));
    }

    /**
     * @covers PsUtil::getClassMethods
     */
    public function testGetClassMethods() {
        $this->assertEquals(array('CONSTS'), PsUtil::getClassMethods(new ClassA(), true, true, true));
        $this->assertEquals(array('get__DIR__', 'get__FILE__', 'get__CLASS__'), PsUtil::getClassMethods(ClassA::get__CLASS__(), null, true, false));
        $this->assertEquals(array('get__DIR__', 'get__FILE__', 'get__CLASS__', 'CONSTS'), PsUtil::getClassMethods(ClassA::get__CLASS__(), null, true, null));
        $this->assertEquals(array('public_method'), PsUtil::getClassMethods(ClassA::get__CLASS__(), true, false, false));
        $this->assertEquals(array('public_final_method'), PsUtil::getClassMethods(ClassA::get__CLASS__(), true, false, true));
        $this->assertEquals(array('public_method', 'public_final_method'), PsUtil::getClassMethods(ClassA::get__CLASS__(), true, false, null));
        $this->assertEquals(array('public_final_method', 'protected_final_method', 'private_final_method'), PsUtil::getClassMethods(ClassA::get__CLASS__(), null, false, true));
    }

    /**
     * @covers PsUtil::assertMethodExists
     */
    public function testAssertMethodExists() {
        PsUtil::assertMethodExists(ClassA::get__CLASS__(), 'get__FILE__');
        PsUtil::assertMethodExists(ClassA::get__CLASS__(), 'protected_method');
        PsUtil::assertMethodExists(new ClassA(), 'private_final_method');
        try {
            PsUtil::assertMethodExists(new ClassA(), self::NOT_ALLOWED_STR);
            $this->fail('Exception is expected');
        } catch (PException $ex) {
            //OK
        }
    }

    /**
     * @covers PsUtil::getClassConstLikeMethods
     */
    public function testGetClassConstLikeMethods() {
        $this->assertEquals(array('CONSTS'), PsUtil::getClassConstLikeMethods(new ClassA()));
        $this->assertEquals(array('CONSTS'), PsUtil::getClassConstLikeMethods(ClassA::get__FILE__(), 'CONSTS'));
        $this->assertEquals(array(), PsUtil::getClassConstLikeMethods(ClassA::get__FILE__(), 'CONSTS_'));
    }

    /**
     * @covers PsUtil::getClassProperties
     */
    public function testGetClassProperties() {
        $this->assertEquals(array('MY_PROP_ARR', 'MY_PROP_INT'), PsUtil::getClassProperties(new ClassA(), true, true));
        $this->assertEquals(array('MY_PROP_ARR', 'MY_PROP_INT', 'MY_PROP_BOOL'), PsUtil::getClassProperties(ClassA::get__FILE__(), null, true));
        $this->assertEquals(array('MY_PROP_DOUBLE'), PsUtil::getClassProperties(ClassA::get__CLASS__(), true, false));
        $this->assertEquals(array('MY_PROP_DOUBLE', 'MY_PROP_ARR', 'MY_PROP_INT'), PsUtil::getClassProperties(ClassA::get__FILE__(), true));
        $this->assertEquals(array('MY_PROP_DOUBLE', 'MY_PROP_ARR', 'MY_PROP_INT', 'MY_PROP_BOOL'), PsUtil::getClassProperties(ClassA::get__FILE__(), null));
    }

    /**
     * @covers PsUtil::assertClassExists
     * @todo   Implement testAssertClassExists().
     */
    public function testAssertClassExists() {
        PsUtil::assertClassExists(ClassA::get__CLASS__());
        try {
            PsUtil::assertClassExists(self::NOT_ALLOWED_STR);
            $this->fail('Exception is expected');
        } catch (PException $ex) {
            //OK
        }
    }

    /**
     * @covers PsUtil::assertInterfaceExists
     */
    public function testAssertInterfaceExists() {
        PsUtil::assertInterfaceExists('InterfaceA');
        PsUtil::assertInterfaceExists('InterfaceB');
        try {
            PsUtil::assertInterfaceExists(ClassA::get__CLASS__());
            $this->fail('Exception is expected');
        } catch (PException $ex) {
            //OK
        }
        try {
            PsUtil::assertInterfaceExists(self::NOT_ALLOWED_STR);
            $this->fail('Exception is expected');
        } catch (PException $ex) {
            //OK
        }
    }

    /**
     * @covers PsUtil::isInstanceOf
     */
    public function testIsInstanceOf() {
        $this->assertTrue(PsUtil::isInstanceOf(new ClassA(), 'InterfaceA'));
        $this->assertTrue(PsUtil::isInstanceOf(new ClassA(), new ClassA()));
        $this->assertTrue(PsUtil::isInstanceOf(new ClassA(), ClassA::get__CLASS__()));
        $this->assertFalse(PsUtil::isInstanceOf(new ClassA(), 'InterfaceB'));
        $this->assertFalse(PsUtil::isInstanceOf(new ClassA(), __CLASS__));
        $this->assertTrue(PsUtil::isInstanceOf($this, __CLASS__));
    }

    /**
     * @covers PsUtil::assertInstanceOf
     */
    public function testAssertInstanceOf() {
        PsUtil::assertInstanceOf(ClassA::get__CLASS__(), 'InterfaceA');
        PsUtil::assertInstanceOf(ClassA::get__FILE__(), 'InterfaceA');
        PsUtil::assertInstanceOf(new ClassA(), 'InterfaceA');
        try {
            PsUtil::assertInstanceOf(new ClassA(), 'InterfaceB');
            $this->fail('Exception is expected');
        } catch (PException $ex) {
            //OK
        }
    }

    /**
     * @covers PsUtil::newReflectionClass
     */
    public function testNewReflectionClass() {
        PsUtil::assertInstanceOf(PsUtil::newReflectionClass(ClassA::get__CLASS__()), 'ReflectionClass');
        PsUtil::assertInstanceOf(PsUtil::newReflectionClass(new ClassA()), 'ReflectionClass');
        try {
            PsUtil::newReflectionClass(self::NOT_ALLOWED_STR);
            $this->fail('ReflectionException is expected');
        } catch (ReflectionException $ex) {
            //OK
        }
    }

    /**
     * @covers PsUtil::newReflectionMethod
     */
    public function testNewReflectionMethod() {
        PsUtil::assertInstanceOf(PsUtil::newReflectionMethod(ClassA::get__CLASS__(), 'get__FILE__'), 'ReflectionMethod');
        PsUtil::assertInstanceOf(PsUtil::newReflectionMethod(new ClassA(), 'private_final_method'), 'ReflectionMethod');
        try {
            PsUtil::newReflectionMethod(new ClassA(), self::NOT_ALLOWED_STR);
            $this->fail('ReflectionException is expected');
        } catch (ReflectionException $ex) {
            //OK
        }
    }

    /**
     * @covers PsUtil::mergeIniFiles
     */
    public function testMergeIniFiles() {
        $this->assertEquals(array_merge(array(1, 2, 3), array(2, 3, 4)), array(1, 2, 3, 2, 3, 4));
        $this->assertEquals(array_merge(array('a' => 1, 'b' => 2), array('b' => 3, 'c' => 4)), array('a' => 1, 'b' => 3, 'c' => 4));
        $this->assertEquals(array_merge(array('a' => 1, 'd' => 1, 2, 'b' => 2, 4), array('b' => 3, 'c' => 4)), array('a' => 1, 'd' => 1, 2, 'b' => 3, 4, 'c' => 4));

        for ($i = 1; $i <= 3; ++$i) {
            $this->assertEquals(IniFilesTestHelper::di($i)->parseAsIni(true), IniFilesTestHelper::arr($i, true));
            $this->assertEquals(IniFilesTestHelper::di($i)->parseAsIni(false), IniFilesTestHelper::arr($i, false));
        }

        //1+2
        $this->assertEquals(
                //
                PsUtil::mergeIniFiles(//
                        IniFilesTestHelper::di(1)->parseAsIni(), //
                        IniFilesTestHelper::di(2)->parseAsIni()),
                //
                array(
            'section1' => array(
                'p1' => 'v1-2',
                'p2' => 'v2-2'
            ),
            'section2' => array(
                'p2' => 'v2-2',
                'p3' => 'v3-2'
            ),
            'section3' => array(
                'k' => '2',
                'arr' => array('1-1', '2-1', '3-1', '1-2', '2-2', '3-2')
            ),
            'section4' => array(
                'arr' => array(
                    'a' => 'a-2',
                    'b' => 'b-2',
                    'c' => 'c-2'
                )
            )
        ));

        //3+2+1
        $this->assertEquals(
                //
                PsUtil::mergeIniFiles(//
                        IniFilesTestHelper::di(3)->parseAsIni(), //
                        IniFilesTestHelper::di(2)->parseAsIni(), //
                        IniFilesTestHelper::di(1)->parseAsIni()),
                //
                array(
            'section1' => array(
                'p1' => 'v1-1',
                'p2' => 'v2-1'
            ),
            'section2' => array(
                'p2' => 'v2-1',
                'p3' => 'v3-1'
            ),
            'section3' => array(
                'k' => '1',
                'arr' => array('1-3', '2-3', '3-3', '1-2', '2-2', '3-2', '1-1', '2-1', '3-1')
            ),
            'section4' => array(
                'arr' => array(
                    'a' => 'a-1',
                    'b' => 'b-1',
                    'c' => 'c-1'
                )
            )
        ));

        //1+2+3
        $this->assertEquals(
                //
                PsUtil::mergeIniFiles(//
                        IniFilesTestHelper::di(1)->parseAsIni(), //
                        IniFilesTestHelper::di(2)->parseAsIni(), //
                        IniFilesTestHelper::di(3)->parseAsIni()),
                //
                array(
            'section1' => array(
                'p1' => 'v1-3',
                'p2' => 'v2-3'
            ),
            'section2' => array(
                'p2' => 'v2-3',
                'p3' => 'v3-3'
            ),
            'section3' => array(
                'k' => '3',
                'arr' => array('1-1', '2-1', '3-1', '1-2', '2-2', '3-2', '1-3', '2-3', '3-3')
            ),
            'section4' => array(
                'arr' => array(
                    'a' => 'a-3',
                    'b' => 'b-3',
                    'c' => 'c-3'
                )
            )
        ));


        //1+3+2
        $this->assertEquals(
                //
                PsUtil::mergeIniFiles(//
                        IniFilesTestHelper::di(1)->parseAsIni(), //
                        IniFilesTestHelper::di(3)->parseAsIni(), //
                        IniFilesTestHelper::di(2)->parseAsIni()),
                //
                array(
            'section1' => array(
                'p1' => 'v1-2',
                'p2' => 'v2-2'
            ),
            'section2' => array(
                'p2' => 'v2-2',
                'p3' => 'v3-2'
            ),
            'section3' => array(
                'k' => '2',
                'arr' => array('1-1', '2-1', '3-1', '1-3', '2-3', '3-3', '1-2', '2-2', '3-2')
            ),
            'section4' => array(
                'arr' => array(
                    'a' => 'a-2',
                    'b' => 'b-2',
                    'c' => 'c-2'
                )
            )
        ));


        //5+6
        $this->assertEquals(
                //
                PsUtil::mergeIniFiles(//
                        IniFilesTestHelper::di(5)->parseAsIni(), //
                        IniFilesTestHelper::di(6)->parseAsIni()),
                //
                array(
            'keys' => array(
                'k1' => '1',
                'k2' => '2',
                'k3' => '2',
                'k4' => '2'
            ),
            'array-idx' => array(
                'arr' => array('1', '2', '3', '3', '4', '5')
            ),
            'array-asc' => array(
                'arr' => array(
                    'a' => '1',
                    'b' => '3',
                    'c' => '4',
                    'd' => '5'
                )
            )
        ));


        //5+6+7
        $this->assertEquals(
                //
                PsUtil::mergeIniFiles(//
                        IniFilesTestHelper::di(5)->parseAsIni(), //
                        IniFilesTestHelper::di(6)->parseAsIni(), //
                        IniFilesTestHelper::di(7)->parseAsIni()
                ),
                //
                array(
            'keys' => array(
                'k1' => '1',
                'k2' => '2',
                'k3' => '3',
                'k4' => '3',
                'k5' => '3'
            ),
            'array-idx' => array(
                'arr' => array('1', '2', '3', '3', '4', '5', '5', '6', '7')
            ),
            'array-asc' => array(
                'arr' => array(
                    'a' => '1',
                    'b' => '3',
                    'c' => '5',
                    'd' => '6',
                    'e' => '7'
                )
            )
        ));


        //1+2+3+5+6+7
        $this->assertEquals(
                //
                PsUtil::mergeIniFiles(//
                        IniFilesTestHelper::di(1)->parseAsIni(), //
                        IniFilesTestHelper::di(2)->parseAsIni(), //
                        IniFilesTestHelper::di(3)->parseAsIni(), //
                        IniFilesTestHelper::di(5)->parseAsIni(), //
                        IniFilesTestHelper::di(6)->parseAsIni(), //
                        IniFilesTestHelper::di(7)->parseAsIni()
                ),
                //
                array(
            'section1' => array(
                'p1' => 'v1-3',
                'p2' => 'v2-3'
            ),
            'section2' => array(
                'p2' => 'v2-3',
                'p3' => 'v3-3'
            ),
            'section3' => array(
                'k' => '3',
                'arr' => array('1-1', '2-1', '3-1', '1-2', '2-2', '3-2', '1-3', '2-3', '3-3')
            ),
            'section4' => array(
                'arr' => array(
                    'a' => 'a-3',
                    'b' => 'b-3',
                    'c' => 'c-3'
                )
            ),
            'keys' => array(
                'k1' => '1',
                'k2' => '2',
                'k3' => '3',
                'k4' => '3',
                'k5' => '3'
            ),
            'array-idx' => array(
                'arr' => array('1', '2', '3', '3', '4', '5', '5', '6', '7')
            ),
            'array-asc' => array(
                'arr' => array(
                    'a' => '1',
                    'b' => '3',
                    'c' => '5',
                    'd' => '6',
                    'e' => '7'
                )
            )
        ));
    }
}

