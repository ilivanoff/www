<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-09-18 at 15:40:56.
 */
class PsRandTest extends BasePsTest {

    const TOTAL = 500;
    const MINIMUM = 200;

    /**
     * @covers PsRand::bool
     */
    public function testBool() {
        $cntTrue = 0;
        for ($i = 0; $i <= self::TOTAL; $i++) {
            $val = PsRand::bool();
            $this->assertTrue(is_bool($val));
            $cntTrue+=$val ? 1 : 0;
        }
        $this->assertTrue($cntTrue > self::MINIMUM);
    }

    /**
     * @covers PsRand::char
     */
    public function testChar() {
        $lowerCnt = 0;
        $numsCnt = 0;
        for ($i = 0; $i <= self::TOTAL; $i++) {
            $ChAr = PsRand::char();
            $this->assertTrue(is_string($ChAr) && strlen($ChAr) === 1 && !is_numeric($ChAr));
            $lowerCnt += strtolower($ChAr) === $ChAr ? 1 : 0;

            $char = PsRand::char(false);
            $this->assertTrue(is_string($char) && strlen($char) === 1 && !is_numeric($char) && (strtolower($char) === $char));
            $this->assertFalse(strtoupper($char) === $char);

            $CHAR = PsRand::char(true);
            $this->assertTrue(is_string($CHAR) && strlen($CHAR) === 1 && !is_numeric($CHAR) && (strtoupper($CHAR) === $CHAR));
            $this->assertFalse(strtolower($CHAR) === $CHAR);

            $char1 = PsRand::char(null, true);
            $this->assertTrue(is_string($char1) && strlen($char1) === 1);
            $numsCnt += is_numeric($char1) ? 1 : 0;
        }
        $this->assertTrue($lowerCnt > self::MINIMUM);
        $this->assertTrue($numsCnt > self::TOTAL / 5);
        $this->assertTrue($numsCnt < self::TOTAL / 2);
    }

    /**
     * @covers PsRand::string
     */
    public function testString() {
        $sequences = array();
        for ($i = 0; $i < self::TOTAL; $i++) {
            $StRiNg = PsRand::string(MD5_STR_LENGTH, null, false);
            $this->assertTrue(is_string($StRiNg) && strlen($StRiNg) === MD5_STR_LENGTH && !is_numeric($StRiNg), "$i: $StRiNg");
            $this->assertFalse(strtolower($StRiNg) === $StRiNg, "$i: $StRiNg");
            $this->assertFalse(strtoupper($StRiNg) === $StRiNg, "$i: $StRiNg");
            $sequences[] = $StRiNg;

            $string = PsRand::string(MD5_STR_LENGTH, false, false);
            $this->assertTrue(is_string($string) && strlen($string) === MD5_STR_LENGTH && !is_numeric($string) && (strtolower($string) === $string), "$i: $string");
            $this->assertFalse(strtoupper($string) === $string, "$i: $string");
            $sequences[] = $string;

            $STRING = PsRand::string(MD5_STR_LENGTH, true, false);
            $this->assertTrue(is_string($STRING) && strlen($STRING) === MD5_STR_LENGTH && !is_numeric($STRING) && (strtoupper($STRING) === $STRING), "$i: $STRING");
            $this->assertFalse(strtolower($STRING) === $STRING, "$i: $STRING");
            $sequences[] = $STRING;

            $StRiNg1 = PsRand::string(MD5_STR_LENGTH, null, true);
            $this->assertTrue(is_string($StRiNg1) && strlen($StRiNg1) === MD5_STR_LENGTH && !is_numeric($StRiNg1), "$i: $StRiNg1");
            $this->assertFalse(strtolower($StRiNg1) === $StRiNg1, "$i: $StRiNg1");
            $this->assertFalse(strtoupper($StRiNg1) === $StRiNg1, "$i: $StRiNg1");
            $sequences[] = $StRiNg1;
        }

        self::log(print_r($sequences, true));

        //Проверим, что все последовательности - уникальны
        $this->assertTrue(count(array_unique($sequences)) === count($sequences));
    }

}