<?php

/**
 * Базовый класс для всех сущностей фолдинга 'Диалоговые окна' (dg)
 * 
 * @author autogenerated
 */
abstract class BaseDialog extends FoldedClass {

    protected function _construct() {
        //Конструируем объект
    }

    public function getAuthType() {
        return AuthManager::AUTH_TYPE_NO_MATTER;
    }

    /**
     * Основной метод, который строит содержимое диалогового окна.
     */
    public final function getWindowContent() {
        //Логгер
        $LOGGER = $this->LOGGER();

        $CACHE = $this->cacheGroup();
        $CACHE = $CACHE instanceof PSCacheInst ? $CACHE : null;
        $CACHE_KEY = $this->foldedEntity->getUnique('DIALOG_WINDOW_CONTENT');

        /*
         * Проверим, можно ли работать с кешем и есть ли закешированная версия
         */
        $LOGGER->info("Loading dialog content.");
        if ($CACHE) {
            $LOGGER->info("Can use cache, key: $CACHE_KEY.");
            $CONTENT = $CACHE->getFromCache($CACHE_KEY);
            if ($CONTENT) {
                $LOGGER->info("Found in cache.");
                return $CONTENT;
            } else {
                $LOGGER->info("Not found in cache.");
            }
        } else {
            $LOGGER->info("Cannot use cache.");
        }

        $this->profilerStart(__FUNCTION__);
        try {
            //Получим параметры для шаблона smarty
            $smartyParams = to_array($this->getWindowTplSmartyParams());
            //Отлогируем параметры
            if ($LOGGER->isEnabled()) {
                $LOGGER->info("Tpl smarty params: {}", array_to_string($smartyParams, true));
            }
            //Произведём фетчинг шаблона
            $CONTENT = $this->foldedEntity->fetchTpl($smartyParams);
            //Останавливаем профилирование
            $this->profilerStop();
            //Сохраним в кеш
            if ($CACHE && $CONTENT) {
                $CACHE->saveToCache($CONTENT, $CACHE_KEY);
                $LOGGER->info("Data saved to cache.");
            }
            //Вернём результат
            return $CONTENT;
        } catch (Exception $ex) {
            $this->profilerStop(false);
            throw $ex;
        }
    }

    /**
     * Группа кеширования, которая используется для кеширования данных окна.
     * Если ничего не возвращается, то кеширование производиться не будет.
     * 
     * @return PSCacheInst Экземпляр группы кеширования
     */
    protected abstract function cacheGroup();

    /**
     * Параметры smarty, которые будут переданы в шаблон содержимого диалогового окна.
     */
    protected abstract function getWindowTplSmartyParams();
}

?>